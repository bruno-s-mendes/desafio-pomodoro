{"version":3,"sources":["components/timePicker.js","resources/finished.mp3","components/watch.js","App.js","reportWebVitals.js","index.js"],"names":["TimePicker","taskTime","setTaskTime","breakTime","setBreakTime","className","htmlFor","type","id","name","value","onChange","event","target","Clock","countDownTime","useState","time","setTime","bTime","setBTime","isBreak","setIsBreak","breakClass","setBreackClass","timerPhrase","setTimerPhrase","pause","setPause","showTime","setShowTime","useEffect","date","Date","setSeconds","seconds","getSeconds","setTimetoDate","timer","setTimeout","audio","Audio","finished","clearTimeout","play","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.704eadd0.chunk.js","sourcesContent":["import React from 'react';\nimport '../style/timePicker.css';\n\nfunction TimePicker({taskTime, setTaskTime, breakTime, setBreakTime}) {\n  return (\n    <form className='timePicker'>\n      <label htmlFor=\"tTime\">Task time(seconds):</label>\n      <input\n        data-testid='taskTime'\n        type=\"number\"\n        id=\"tTime\"\n        name=\"tTime\"\n        value={taskTime}\n        onChange={(event) => setTaskTime(event.target.value)}\n      />\n      <label htmlFor=\"bTime\">Break time(seconds):</label>\n      <input\n        data-testid='breakTime'\n        type=\"number\"\n        id=\"bTime\"\n        name=\"bTime\"\n        value={breakTime}\n        onChange={(event) => setBreakTime(event.target.value)}\n      />\n    </form>\n  );\n}\n\nexport default TimePicker;","export default __webpack_public_path__ + \"static/media/finished.5e3a6a2e.mp3\";","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport '../style/watch.css';\nimport finished from '../resources/finished.mp3'\n\nfunction Clock({ countDownTime, breakTime }) {\n  const [time, setTime] = useState(countDownTime);\n  const [bTime, setBTime] = useState(breakTime);\n  const [isBreak, setIsBreak] = useState(false);\n  const [breakClass, setBreackClass] = useState('regular');\n  const [timerPhrase, setTimerPhrase] = useState('Task remaining time')\n  const [pause, setPause] = useState(true);\n  const [showTime, setShowTime] = useState();\n\n  const setTimetoDate = (value) => {\n    const date = new Date();\n    date.setSeconds(value);\n    const seconds = date.getSeconds();\n    setShowTime(seconds);\n  }\n\n  useEffect(() => {\n    if(isBreak){\n      setTimerPhrase('Break remaining time')\n      return setBreackClass('break');\n\n    } else {\n      setTimerPhrase('Task remaining time')\n      return setBreackClass('regular');\n    }\n  }, [breakClass, isBreak])\n\n  useEffect(() => {\n    return setTimetoDate(time);\n  }, [time])\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setTime(time -1);\n    }, 1000);\n    const audio = new Audio(finished);\n    if (time === 0 && !isBreak) {\n        setTime(bTime);\n        setIsBreak(!isBreak);\n        audio.play();\n        return clearTimeout(timer);\n    }\n    if (time === 0 && isBreak) {\n    return clearTimeout(timer);\n  }\n    if (pause === true) {\n      return clearTimeout(timer);\n    }\n  },[time, isBreak, pause, bTime]);\n\n  const restart = () => {\n    setPause(true);\n    setTime(25);\n    setBTime(5)\n    setIsBreak(false);\n  }\n\n  const set = () => {\n    setPause(true);\n    setTime(countDownTime);\n    setBTime(breakTime)\n    setIsBreak(false);\n  }\n\n  return (\n    <div className='clock'>\n      <div className='top-btn-container'>\n        <button\n          className='top-btn'\n          type=\"button\"\n          onClick={ () => set() }\n          >\n        Set\n        </button>\n        <button\n          className='top-btn'\n          type=\"button\"\n          onClick={ () => restart() }\n        >\n        Reset\n        </button>\n      </div>\n    <button\n      className={`timeDisplay ${breakClass}`}\n      type=\"button\"\n    >\n    { `${timerPhrase} ${showTime} seconds`}\n    </button>\n    <button\n      id='startPauseBTN'\n      type=\"button\"\n      onClick={ () => setPause(!pause) }\n    >\n    Start/Pause\n    </button>\n    </div>\n  );\n}\n\nClock.propTypes = {\n  countDownTime: PropTypes.number.isRequired,\n};\n\nexport default Clock;","import './style/App.css';\nimport React, { useState } from 'react';\nimport TimePicker from './components/timePicker';\nimport Clock from './components/watch';\n\n\nfunction App() {\n  const [taskTime, setTaskTime] = useState(25);\n  const [breakTime, setBreakTime] = useState(5)\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Pomodoro Timer</h1>\n      <TimePicker\n        taskTime = {taskTime}\n        setTaskTime = {setTaskTime}\n        breakTime = {breakTime}\n        setBreakTime = {setBreakTime}\n      />\n      <Clock\n        countDownTime = {taskTime}\n        breakTime = {breakTime}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}